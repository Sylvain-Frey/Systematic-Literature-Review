id,year,author,title,abstract,library,search_term,url
10-Bedra-Getting,2010,"Bedra, A.",Getting Started with Google App Engine and Clojure,"Over the past two years (2008-2010), Clojure (http:// clojure.org) has made quite a splash in two areas: functional programming and the Java Virtual Machine (JVM). Clojure is a Lisp implementation on the JVM, offering its users significant elegance, simplicity, and power. Although Clojure is a fairly young language, it's extremely well thought out and mature, with a vibrant community of talented and friendly people using and contributing to it. If you're targeting the JVM as your platform, you're doing yourself a disservice by not considering Clojure as an option. That being said, beauty is in the eye of the beholder, and you must decide for yourself. So, let's take a look at Compojure, a Web framework built on the Clojure language, and see how to create and deploy a Compojure application on the Google App Engine platform.",ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5496809
10-Vanderburg-Clojure,2010,"Vanderburg, G.",Clojure Templating Libraries: Fleet and Enlive,"Last issue, Aaron Bedra wrote about Compojure, a Clojure-based Web framework. Here, I follow up on his article, delving into one particular aspect of Web development using Clojure and Compojure: templating. On a recent project, I had the pleasure of working with Bedra, using Compojure. I had done Clojure programming before, but that project was the first time I had used it for Web development. One of the earliest decisions we had to make was which templating system to use.",ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5562497
12-Kalin-Clojure,2012,"Kalin, M.; Miller, D.",Clojure for Number Crunching on Multicore Machines,"Clojure is a Lisp language designed to run on a Java Virtual Machine (JVM) and interoperate automatically with all Java libraries. However, compared to Java, Clojure has a concurrency API that encourages programmers to take advantage of multicore architectures through multithreading, but Clojure doesn't burden programmers with low-level thread-coordination tasks.",ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6235943
12-Djuric-Incorporating,2012,"Djuric, D.; Devedzic, V.",Incorporating the Ontology Paradigm Into Software Engineering: Enhancing Domain-Driven Programming in Clojure/Java,"There is a notable overlap of the challenges with which the semantic technologies and software engineering deal. They can also complement and mutually improve each other. Current efforts mostly focus on improving software tools around the resource description framework (RDF) and Web Ontology Language (OWL) Web-oriented ecosystem that helps ontology engineers but is alien to software engineers. This paper presents an opposite approach taken from the software developer's viewpoint - an incorporation of the ontology paradigm into a general-purpose programming language, in a simple and agile way, on a small scale, and in an unpretentious manner. The objective is to help programmers write simple domain-driven code with richer semantics. The means to achieve this objective relies on metaprogramming to internalize the ontology modeling paradigm into a mainstream programming environment based on the Java ecosystem, in a lightweight manner suitable for small teams. An embedded meta domain-specific language (DSL), which is called Magic Potion, is implemented in Clojure and blends ontology, functional, object-oriented, and concurrent paradigms. An example from the technology enhanced learning (TEL) domain is used to illustrate Magic Potion in action.",ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5766765
11-McGranaghan-ClojureScript:,2011,"McGranaghan, M.",ClojureScript: Functional Programming for JavaScript Platforms,"ClojureScript is a compiler from a Clojure-like functional programming language to JavaScript. ClojureScript features deep integration with the Google Closure JavaScript library and whole-program optimizing compiler. ClojureScript brings efficient functional programming to JavaScript environments such as the browser, which are becoming increasingly important components of full-stack Web applications.",ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062553
09-Day-Towards,2009,"Day, N.; Downing, J.; Hawizy, L.; Adams, N.; Murray-Rust, P.","Towards Lensfield - Data Management, Processing and Semantic Publication for Vernacular e-Science","Lensfield is a desktop and filesystem-based tool designed as a Â¿personal data management assistantÂ¿ for the scientist. It combines distributed version control (DVCS), software transaction memory (STM) and linked open data (LOD) publishing to create a novel data management, processing and publication tool. The application Â¿just looks afterÂ¿ these technologies for the scientist, providing simple interfaces for typical uses. It is built with Clojure and includes macros which define steps in a common workflow. Functions and Java libraries provide facilities for automatic processing of data which is ultimately published as RDF in a Web application. The progress of data processing is tracked by a fine-grained data structure that can be serialized to disk, with the potential to include manual steps and programmatic interrupts in largely automated processes through seamless resumption. Flexibility in operation and minimizing barriers to adoption are major design features.",ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5380845
12-Fenwick-An,2012,"Fenwick, M.; Sesanker, C.; Schiller, M.R.; Ellis, H.J.C.; Hinman, M.L.; Vyas, J.; Gryk, M.R.",An Open-Source Sandbox for Increasing the Accessibility of Functional Programming to the Bioinformatics and Scientific Communities,"Scientists are continually faced with the need to express complex mathematical notions in code. The renaissance of functional languages such as LISP and Haskell is often credited to their ability to implement complex data operations and mathematical constructs in an expressive and natural idiom. The slow adoption of functional computing in the scientific community does not, however, reflect the congeniality of these fields. Unfortunately, the learning curve for adoption of functional programming techniques is steeper than that for more traditional languages in the scientific community, such as Python and Java, and this is partially due to the relative sparseness of available learning resources. To fill this gap, we demonstrate and provide applied, scientifically substantial examples of functional programming, We present a multi-language source-code repository for software integration and algorithm development, which generally focuses on the fields of machine learning, data processing, bioinformatics. We encourage scientists who are interested in learning the basics of functional programming to adopt, reuse, and learn from these examples. The source code is available at: https://github.com/CONNJUR/CONNJUR-Sandbox (see also http://www.connjur.org).",ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6209130
13-Hinsen-A,2013,"Hinsen, K.",A Glimpse of the Future of Scientific Programming,Technology being developed right now in computer science labs might change the way scientists and engineers write programs in the future.,ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6415901
12-Pierro-Concurrency,2012,"Di Pierro, Massimo; Skinner, David",Concurrency in Modern Programming Languages,The guest editors present the articles for this special issue on modern programming languages.,ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6341738
13-Podloucky-Rapid,2013,"Podloucky, M.",Rapid Application Prototyping for Functional Languages,"This work addresses the problem of automated graphical user interface generation for functional programs in relation to rapid application prototyping. First an analysis of current state in the field of automated GUI generation is performed. Based on the analysis, the concept of functionally structured user interface (FSUI) is introduced. Meta-data system for code annotation is then specified for the Clojure programming language and a transformation from this system to FSUI data model is implemented. Finally, a graphical layer for displaying the actual interface is implemented in Clojure.",ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6644130
12-Munteanu-An,2012,"Munteanu, V.I.; Fortis, T.-F.; Negru, V.",An Event Driven Multi-agent Architecture for Enabling Cloud Governance,"Cloud adoption is consistent within IT-based industries at different maturity levels. While cloud migration is an ongoing process, its base characteristics are not yet fully exploited. As Cloud Governance is built on top of requirements like security, reliability, trust, portability, interoperability, or fail over, a highly distributed and concurrent, and fault tolerant solution is required in order to achieve above specified requirements. This paper describes the core of an event-driven multi-agent architecture for supporting Cloud Governance activities, built around Akka/Clojure actor characteristics and fully exploiting the Enterprise Integration Patterns. The modeling process follows the Gaia methodology for agent-oriented analysis and design.",ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6424965
09-Hinsen-The,2009,"Hinsen, K.",The Promises of Functional Programming,"Adopting a functional programming style could make your programs more robust, more compact, and more easily parallelizable. However, mastering it requires some effort. This article's purpose is to explain what functional programming is and how it differs from traditional imperative programming. The author also explains how functional programming helps with concurrent and parallel programming. The language I use in the examples is Clojure, a modern dialect of Lisp.",ieee,clojure,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5076325
